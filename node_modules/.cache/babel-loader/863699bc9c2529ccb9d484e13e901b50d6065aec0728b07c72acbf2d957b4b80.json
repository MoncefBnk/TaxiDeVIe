{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  data: function data() {\n    return {\n      showValidation: false,\n      customerName: \"\",\n      pickupLocation: \"\",\n      requestId: null\n    };\n  },\n  methods: {\n    // Simuler l'appel API à des fins de démonstration\n    simulateAPICall: function simulateAPICall(action) {\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          if (Math.random() > 0.5) {\n            resolve(\"Trajet \".concat(action, \"\\xE9 avec succ\\xE8s\"));\n          } else {\n            reject(\"Erreur lors de \".concat(action, \" du trajet\"));\n          }\n        }, 1000); // Simulation d'un délai comme s'il s'agissait d'un appel API asynchrone\n      });\n    },\n    simulateNewRideRequest: function simulateNewRideRequest() {\n      // Simuler une nouvelle demande de trajet\n      var customerName = \"John Doe\";\n      var pickupLocation = \"123 Main Street\";\n      var requestId = Math.floor(Math.random() * 1); // Simulation d'un ID unique\n\n      // Afficher les informations de validation\n      this.showValidationPopup(customerName, pickupLocation, requestId);\n    },\n    showValidationPopup: function showValidationPopup(customerName, pickupLocation, requestId) {\n      this.customerName = customerName;\n      this.pickupLocation = pickupLocation;\n      this.requestId = requestId;\n      this.showValidation = true;\n    },\n    acceptRide: function acceptRide() {\n      var _this = this;\n      // Simuler l'appel API pour accepter le trajet\n      this.simulateAPICall(\"accepter\").then(function (response) {\n        console.log(response);\n        // Placeholder: Fermer les informations de validation après une acceptation réussie\n        _this.showValidation = false;\n      })[\"catch\"](function (error) {\n        console.error(error);\n        // Gérer l'erreur si nécessaire\n      });\n    },\n    rejectRide: function rejectRide() {\n      var _this2 = this;\n      // Simuler l'appel API pour rejeter le trajet\n      this.simulateAPICall(\"rejeter\").then(function (response) {\n        console.log(response);\n        // Placeholder: Fermer les informations de validation après un rejet réussi\n        _this2.showValidation = false;\n      })[\"catch\"](function (error) {\n        console.error(error);\n        // Gérer l'erreur si nécessaire\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","showValidation","customerName","pickupLocation","requestId","methods","simulateAPICall","action","Promise","resolve","reject","setTimeout","Math","random","concat","simulateNewRideRequest","floor","showValidationPopup","acceptRide","_this","then","response","console","log","error","rejectRide","_this2"],"sources":["/Users/moncefbenkhalfallah/Desktop/TaxiDeVie/taxi-de-vie/src/components/Driver/ApprovalDriver.vue"],"sourcesContent":["<template>\n    <div>\n      <!-- Simuler une nouvelle demande de trajet -->\n      <button @click=\"simulateNewRideRequest\">Simuler une nouvelle demande de trajet</button>\n      \n      <div v-if=\"showValidation\" class=\"validation-overlay\">\n        <div class=\"validation-info\">\n          <h2>Nouvelle demande de trajet</h2>\n          <p>{{ customerName }} demande un trajet.</p>\n          <p>Emplacement : {{ pickupLocation }}</p>\n          <button @click=\"acceptRide\">Accepter</button>\n          <button @click=\"rejectRide\">Rejeter</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        showValidation: false,\n        customerName: \"\",\n        pickupLocation: \"\",\n        requestId: null,\n      };\n    },\n    methods: {\n      // Simuler l'appel API à des fins de démonstration\n      simulateAPICall(action) {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (Math.random() > 0.5) {\n              resolve(`Trajet ${action}é avec succès`);\n            } else {\n              reject(`Erreur lors de ${action} du trajet`);\n            }\n          }, 1000); // Simulation d'un délai comme s'il s'agissait d'un appel API asynchrone\n        });\n      },\n      simulateNewRideRequest() {\n        // Simuler une nouvelle demande de trajet\n        const customerName = \"John Doe\";\n        const pickupLocation = \"123 Main Street\";\n        const requestId = Math.floor(Math.random() * 1); // Simulation d'un ID unique\n  \n        // Afficher les informations de validation\n        this.showValidationPopup(customerName, pickupLocation, requestId);\n      },\n      showValidationPopup(customerName, pickupLocation, requestId) {\n        this.customerName = customerName;\n        this.pickupLocation = pickupLocation;\n        this.requestId = requestId;\n        this.showValidation = true;\n      },\n      acceptRide() {\n        // Simuler l'appel API pour accepter le trajet\n        this.simulateAPICall(\"accepter\")\n          .then((response) => {\n            console.log(response);\n            // Placeholder: Fermer les informations de validation après une acceptation réussie\n            this.showValidation = false;\n          })\n          .catch((error) => {\n            console.error(error);\n            // Gérer l'erreur si nécessaire\n          });\n      },\n      rejectRide() {\n        // Simuler l'appel API pour rejeter le trajet\n        this.simulateAPICall(\"rejeter\")\n          .then((response) => {\n            console.log(response);\n            // Placeholder: Fermer les informations de validation après un rejet réussi\n            this.showValidation = false;\n          })\n          .catch((error) => {\n            console.error(error);\n            // Gérer l'erreur si nécessaire\n          });\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .validation-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .validation-info {\n    background-color: white;\n    padding: 20px;\n    border: 1px solid #ccc;\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n    text-align: center;\n  }\n  \n  button {\n    margin: 5px;\n    padding: 10px;\n    cursor: pointer;\n  }\n  </style>\n  "],"mappings":";;AAkBE,eAAe;EACbA,IAAI,WAAAA,KAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,KAAK;MACrBC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,eAAe,WAAAA,gBAACC,MAAM,EAAE;MACtB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCC,UAAU,CAAC,YAAM;UACf,IAAIC,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,EAAE;YACvBJ,OAAO,WAAAK,MAAA,CAAWP,MAAM,wBAAe,CAAC;UAC1C,OAAO;YACLG,MAAM,mBAAAI,MAAA,CAAmBP,MAAM,eAAY,CAAC;UAC9C;QACF,CAAC,EAAE,IAAI,CAAC,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;IACDQ,sBAAsB,WAAAA,uBAAA,EAAG;MACvB;MACA,IAAMb,YAAW,GAAI,UAAU;MAC/B,IAAMC,cAAa,GAAI,iBAAiB;MACxC,IAAMC,SAAQ,GAAIQ,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;;MAEjD;MACA,IAAI,CAACI,mBAAmB,CAACf,YAAY,EAAEC,cAAc,EAAEC,SAAS,CAAC;IACnE,CAAC;IACDa,mBAAmB,WAAAA,oBAACf,YAAY,EAAEC,cAAc,EAAEC,SAAS,EAAE;MAC3D,IAAI,CAACF,YAAW,GAAIA,YAAY;MAChC,IAAI,CAACC,cAAa,GAAIA,cAAc;MACpC,IAAI,CAACC,SAAQ,GAAIA,SAAS;MAC1B,IAAI,CAACH,cAAa,GAAI,IAAI;IAC5B,CAAC;IACDiB,UAAU,WAAAA,WAAA,EAAG;MAAA,IAAAC,KAAA;MACX;MACA,IAAI,CAACb,eAAe,CAAC,UAAU,EAC5Bc,IAAI,CAAC,UAACC,QAAQ,EAAK;QAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB;QACAF,KAAI,CAAClB,cAAa,GAAI,KAAK;MAC7B,CAAC,UACK,CAAC,UAACuB,KAAK,EAAK;QAChBF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;IACN,CAAC;IACDC,UAAU,WAAAA,WAAA,EAAG;MAAA,IAAAC,MAAA;MACX;MACA,IAAI,CAACpB,eAAe,CAAC,SAAS,EAC3Bc,IAAI,CAAC,UAACC,QAAQ,EAAK;QAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB;QACAK,MAAI,CAACzB,cAAa,GAAI,KAAK;MAC7B,CAAC,UACK,CAAC,UAACuB,KAAK,EAAK;QAChBF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;IACN;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}