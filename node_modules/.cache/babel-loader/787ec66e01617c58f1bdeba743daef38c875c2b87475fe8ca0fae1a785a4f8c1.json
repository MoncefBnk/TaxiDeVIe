{"ast":null,"code":"import _regeneratorRuntime from \"/Users/moncefbenkhalfallah/Desktop/TaxiDeVie/taxi-de-vie/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/moncefbenkhalfallah/Desktop/TaxiDeVie/taxi-de-vie/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport axios from 'axios';\nexport default {\n  setup: function setup() {\n    var register_form = ref({\n      fullName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      address: '',\n      phoneNumber: ''\n      // Add any other required fields here\n    });\n\n    var store = useStore();\n    var passwordsDoNotMatch = ref(false);\n    var register = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var userData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(register_form.value.password === register_form.value.confirmPassword)) {\n                _context.next = 14;\n                break;\n              }\n              passwordsDoNotMatch.value = false;\n              _context.prev = 2;\n              // Create a user with email and password using Firebase Authentication\n              // ... (same as before)\n              // Update MongoDB with additional user information using your REST API\n              userData = {\n                numberClient: \"1001\",\n                id: auth.currentUser.uid,\n                name: register_form.value.fullName,\n                lastname: '',\n                // Add last name if available in the form\n                mail_address: register_form.value.email,\n                address: register_form.value.address,\n                phone: register_form.value.phoneNumber\n                // Add any other required fields here\n              }; // Make a POST request to your MongoDB REST API endpoint\n              _context.next = 6;\n              return axios.post('https://localhost:7066/v1/api/Client', userData);\n            case 6:\n              store.dispatch('register', register_form.value);\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              console.error('Error registering user:', _context.t0.message);\n            case 12:\n              _context.next = 15;\n              break;\n            case 14:\n              passwordsDoNotMatch.value = true;\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 9]]);\n      }));\n      return function register() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      register_form: register_form,\n      register: register,\n      passwordsDoNotMatch: passwordsDoNotMatch\n    };\n  }\n};","map":{"version":3,"names":["ref","useStore","axios","setup","register_form","fullName","email","password","confirmPassword","address","phoneNumber","store","passwordsDoNotMatch","register","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userData","wrap","_callee$","_context","prev","next","value","numberClient","id","auth","currentUser","uid","name","lastname","mail_address","phone","post","dispatch","t0","console","error","message","stop","apply","arguments"],"sources":["/Users/moncefbenkhalfallah/Desktop/TaxiDeVie/taxi-de-vie/src/components/RegisterPage.vue"],"sourcesContent":["<template>\n\t<main class=\"login\">\n\t  <section class=\"forms\">\n\t\t<form class=\"register\" @submit.prevent=\"register\">\n\t\t  <h2>Welcome to Taxi de vie</h2>\n\t\t  <h2>Register</h2>\n\t\t  <input type=\"text\" placeholder=\"Full Name\" v-model=\"register_form.fullName\" />\n\t\t  <input type=\"email\" placeholder=\"Email address\" v-model=\"register_form.email\" />\n\t\t  <input type=\"password\" placeholder=\"Password\" v-model=\"register_form.password\" />\n\t\t  <input type=\"password\" placeholder=\"Confirm Password\" v-model=\"register_form.confirmPassword\" />\n\t\t  <input type=\"text\" placeholder=\"Address\" v-model=\"register_form.address\" />\n\t\t  <input type=\"tel\" placeholder=\"Phone Number\" v-model=\"register_form.phoneNumber\" />\n\t\t  <!-- Add any other required fields here -->\n\t\t  <input type=\"submit\" value=\"Register\" />\n\t\t  <p>Already have an account ?</p>\n\t\t  <router-link to=\"login\" class=\"register-links\">Login here !</router-link>\n\t\t  <p v-if=\"passwordsDoNotMatch\">Passwords do not match!</p>\n\t\t</form>\n\t  </section>\n\t</main>\n  </template>\n  \n  <script>\n  import { ref } from 'vue';\n  import { useStore } from 'vuex';\n  import axios from 'axios';\n  \n  export default {\n\tsetup() {\n\t  const register_form = ref({\n\t\tfullName: '',\n\t\temail: '',\n\t\tpassword: '',\n\t\tconfirmPassword: '',\n\t\taddress: '',\n\t\tphoneNumber: '',\n\t\t// Add any other required fields here\n\t  });\n\t  const store = useStore();\n\t  const passwordsDoNotMatch = ref(false);\n  \n\t  const register = async () => {\n\t\tif (register_form.value.password === register_form.value.confirmPassword) {\n\t\t  passwordsDoNotMatch.value = false;\n  \n\t\t  try {\n\t\t\t// Create a user with email and password using Firebase Authentication\n\t\t\t// ... (same as before)\n  \n\t\t\t// Update MongoDB with additional user information using your REST API\n\t\t\tconst userData = {\n\t\t\t  numberClient: \"1001\",\n\t\t\t  id: auth.currentUser.uid,\n\t\t\t  name: register_form.value.fullName,\n\t\t\t  lastname: '', // Add last name if available in the form\n\t\t\t  mail_address: register_form.value.email,\n\t\t\t  address: register_form.value.address,\n\t\t\t  phone: register_form.value.phoneNumber,\n\t\t\t  // Add any other required fields here\n\t\t\t};\n  \n\t\t\t// Make a POST request to your MongoDB REST API endpoint\n\t\t\tawait axios.post('https://localhost:7066/v1/api/Client', userData);\n  \n\t\t\t\n\t\t\tstore.dispatch('register', register_form.value);\n\t\t  } catch (error) {\n\t\t\tconsole.error('Error registering user:', error.message);\n\t\t  }\n\t\t} else {\n\t\t  passwordsDoNotMatch.value = true;\n\t\t}\n\t  };\n  \n\t  return {\n\t\tregister_form,\n\t\tregister,\n\t\tpasswordsDoNotMatch,\n\t  };\n\t},\n  };\n  </script>\n  \n  \n<style>\n.forms {\n\tdisplay: flex;\n\tmin-height: 100vh;\n}\n\nform {\n\tflex: 1 1 0%;\n\tpadding: 6rem 1rem 1rem;\n}\n\nform.register {\n\tcolor: #FFF;\n\tbackground-color: rgb(245, 66, 101);\n\tbackground-image: linear-gradient(to bottom right,\n\t\t\trgb(245, 66, 101) 0%,\n\t\t\trgb(189, 28, 60) 100%);\n}\n\nh2 {\n\tfont-size: 2rem;\n\ttext-transform: uppercase;\n\tmargin-bottom: 2rem;\n}\n\ninput {\n\tappearance: none;\n\tborder: none;\n\toutline: none;\n\tbackground: none;\n\n\tdisplay: block;\n\twidth: 100%;\n\tmax-width: 400px;\n\tmargin: 0 auto;\n\tfont-size: 1.5rem;\n\tmargin-bottom: 2rem;\n\tpadding: 0.5rem 0rem;\n}\n\ninput:not([type=\"submit\"]) {\n\topacity: 0.8;\n\ttransition: 0.4s;\n}\n\ninput:focus:not([type=\"submit\"]) {\n\topacity: 1;\n}\n\ninput::placeholder {\n\tcolor: inherit;\n}\n\nform.register input:not([type=\"submit\"]) {\n\tcolor: #FFF;\n\tborder-bottom: 2px solid #FFF;\n}\n\nform.login input:not([type=\"submit\"]) {\n\tcolor: #2c3e50;\n\tborder-bottom: 2px solid #2c3e50;\n}\n\nform.login input[type=\"submit\"] {\n\tbackground-color: rgb(245, 66, 101);\n\tcolor: #FFF;\n\tfont-weight: 700;\n\tpadding: 1rem 2rem;\n\tborder-radius: 0.5rem;\n\tcursor: pointer;\n\ttext-transform: uppercase;\n}\n\nform.register input[type=\"submit\"] {\n\tbackground-color: #FFF;\n\tcolor: rgb(245, 66, 101);\n\tfont-weight: 700;\n\tpadding: 1rem 2rem;\n\tborder-radius: 0.5rem;\n\tcursor: pointer;\n\ttext-transform: uppercase;\n}\n.register-links {\n\tcolor: #FFF; \n\ttext-decoration: underline;\n\tcursor: pointer;\n\tmargin-bottom: 2rem;\n\tdisplay: block; \n  }\n</style>"],"mappings":";;AAuBE,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,QAAO,QAAS,MAAM;AAC/B,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EAChBC,KAAK,WAAAA,MAAA,EAAG;IACN,IAAMC,aAAY,GAAIJ,GAAG,CAAC;MAC3BK,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE;MACb;IACC,CAAC,CAAC;;IACF,IAAMC,KAAI,GAAIV,QAAQ,CAAC,CAAC;IACxB,IAAMW,mBAAkB,GAAIZ,GAAG,CAAC,KAAK,CAAC;IAEtC,IAAMa,QAAO;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,MACdpB,aAAa,CAACqB,KAAK,CAAClB,QAAO,KAAMH,aAAa,CAACqB,KAAK,CAACjB,eAAe;gBAAAc,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACtEZ,mBAAmB,CAACa,KAAI,GAAI,KAAK;cAAAH,QAAA,CAAAC,IAAA;cAGlC;cACA;cAEA;cACMJ,QAAO,GAAI;gBACfO,YAAY,EAAE,MAAM;gBACpBC,EAAE,EAAEC,IAAI,CAACC,WAAW,CAACC,GAAG;gBACxBC,IAAI,EAAE3B,aAAa,CAACqB,KAAK,CAACpB,QAAQ;gBAClC2B,QAAQ,EAAE,EAAE;gBAAE;gBACdC,YAAY,EAAE7B,aAAa,CAACqB,KAAK,CAACnB,KAAK;gBACvCG,OAAO,EAAEL,aAAa,CAACqB,KAAK,CAAChB,OAAO;gBACpCyB,KAAK,EAAE9B,aAAa,CAACqB,KAAK,CAACf;gBAC3B;cACF,CAAC,EAED;cAAAY,QAAA,CAAAE,IAAA;cAAA,OACMtB,KAAK,CAACiC,IAAI,CAAC,sCAAsC,EAAEhB,QAAQ,CAAC;YAAA;cAGlER,KAAK,CAACyB,QAAQ,CAAC,UAAU,EAAEhC,aAAa,CAACqB,KAAK,CAAC;cAAAH,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAe,EAAA,GAAAf,QAAA;cAE/CgB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEjB,QAAA,CAAAe,EAAA,CAAMG,OAAO,CAAC;YAAA;cAAAlB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAGtDZ,mBAAmB,CAACa,KAAI,GAAI,IAAI;YAAA;YAAA;cAAA,OAAAH,QAAA,CAAAmB,IAAA;UAAA;QAAA,GAAAvB,OAAA;MAAA,CAEhC;MAAA,gBA/BKL,QAAOA,CAAA;QAAA,OAAAC,IAAA,CAAA4B,KAAA,OAAAC,SAAA;MAAA;IAAA,GA+BZ;IAED,OAAO;MACRvC,aAAa,EAAbA,aAAa;MACbS,QAAQ,EAARA,QAAQ;MACRD,mBAAmB,EAAnBA;IACC,CAAC;EACH;AACC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}